class Testes is subclass of TestCaseUtils
types
-- TODO Define types here
values
-- TODO Define values here
instance variables
-- TODO Define instance variables here
operations
-- TODO Define operations here
private teste1: () ==> ()
teste1() == (
	--users
		dcl u : User := new User(1,"Jose Lima",999999);
		dcl u2 : User := new User(1,"John Cena",999999);
		dcl u3 : User := new User(1,"Josefino Ferreira Filho",999999);
		dcl u4 : User := new User(1,"Nilmar de Jesus",999999);
		dcl u5 : User := new User(1,"Washington Silva",999999);
		dcl u6 : User := new User(1,"Sofia Ramos",999999);
		dcl u7 : User := new User(1,"Andreia Silva",999999);
		dcl u8 : User := new User(1,"Ana Ferreira",999999);
		dcl u9 : User := new User(1,"Tatiana Silva",999999);
		dcl u10 : User := new User(1,"Wellington da Silva Junior",999999);
		dcl u11 : User := new User(1,"Rebeca Bueno",999999);
		dcl u12 : User := new User(1,"Wesley Souza",999999);
		dcl u13 : User := new User(1,"Rodolfo Oliveira Quatro",999999);
		
	--devives	
		dcl d : GreenWay_Device := new GreenWay_Device(1,1,"25-GG-31");
		dcl d1 : GreenWay_Device := new GreenWay_Device(1,1,"39-FH-01");
		dcl d2 : GreenWay_Device := new GreenWay_Device(1,1,"17-AA-99");
		dcl d3 : GreenWay_Device := new GreenWay_Device(1,1,"38-HL-31");
		dcl d4 : GreenWay_Device := new GreenWay_Device(1,1,"68-GP-39");
		dcl d5 : GreenWay_Device := new GreenWay_Device(1,1,"69-GP-69");
		dcl d6 : GreenWay_Device := new GreenWay_Device(1,1,"21-II-77");
		dcl d7 : GreenWay_Device := new GreenWay_Device(1,1,"29-AF-01");
		dcl d8 : GreenWay_Device := new GreenWay_Device(1,1,"14-OV-90");
		dcl d9 : GreenWay_Device := new GreenWay_Device(1,1,"12-19-VU");
		dcl d10 : GreenWay_Device := new GreenWay_Device(1,1,"87-67-RX");
		dcl d11 : GreenWay_Device := new GreenWay_Device(1,1,"14-37-BM");
		dcl d12 : GreenWay_Device := new GreenWay_Device(1,1,"43-BM-87");
		dcl d13 : GreenWay_Device := new GreenWay_Device(1,1,"SV-28-01");
		
	
	--servicos
		dcl sp: Service_Provider := new Service_Provider(<AutoEstrada>,"ponto1","LocalA",123,234);
		dcl sp2: Service_Provider := new Service_Provider(<AutoEstrada>,"ponto2","LocalB",456,567);
		dcl sp3: Service_Provider := new Service_Provider(<Estacionamento>,"parque1","LocalB",456,567,1.5);
		dcl sp4: Service_Provider := new Service_Provider(<DriveThru>,"macBoavista","macBoavista",500,489,8);
		dcl sp5: Service_Provider := new Service_Provider(<Gasolina>,"galpBoavista","Bomba Galp Boavista",500,489,50);
		dcl sp6: Service_Provider := new Service_Provider(<Gasolina>,"bpAntas","Bomba BP Antas",123,234,99);
		dcl sp7: Service_Provider := new Service_Provider(<AutoEstrada>,"ponto2","LocalB",456,567);
		dcl sp8: Service_Provider := new Service_Provider(<Estacionamento>,"parque1","LocalB",456,567,1.5);
		dcl sp9: Service_Provider := new Service_Provider(<DriveThru>,"macBoavista","macBoavista",500,489,8);
		dcl sp10: Service_Provider := new Service_Provider(<Gasolina>,"galpBoavista","Bomba Galp Boavista",500,489,50);
	
	--autoestradas
	dcl hc : HighWayCosts := new HighWayCosts("estrada1", {"LocalALocalB" |-> 0.6, "LocalBLocalA" |-> 0.6},12);
	
	dcl ev : Event := new Event("AutoEstrada",10,d,sp,sp2,hc);
	dcl ev2 : Event := new Event("Estacionamento",60,d,sp3,3);
	dcl ev3 : Event := new Event("DriveThru mac", 66, d, sp4,15);
	dcl ev4 : Event := new Event("Gasolina", 80, d, sp5, 50);
	
	dcl greenway: GreenWay := new GreenWay([u],[sp,sp2,sp3,sp4]);
	
	greenway.addUser(u2);
	assertEqual([u,u2],greenway.getUsers());
	
	greenway.addServiceProvider(sp5);
	
	assertEqual([sp,sp2,sp3,sp4,sp5],greenway.getServices());
	
	
	u.addDevice(d);
	assertEqual([d], u.getDevices());
		
	d.addLocation(ev);
	d.addLocation(ev2);
	d.addLocation(ev3);
	
	
	
	assertEqual([ev3.getEventEntryPoint().getServiceLocation(), ev2.getEventEntryPoint().getServiceLocation(),ev.getEventEntryPoint().getServiceLocation()], d.getHistoricLoc());
	d.addLocation(ev4);
	
	assertEqual([ev4.getEventEntryPoint().getServiceLocation(),ev3.getEventEntryPoint().getServiceLocation(), ev2.getEventEntryPoint().getServiceLocation(),ev.getEventEntryPoint().getServiceLocation()], d.getHistoricLoc());

	d.printDeviceHist();
	
	ev.printEvent();
	ev2.printEvent();
	ev3.printEvent();
	ev4.printEvent();
	
	assertEqual(60.1, d.getDebt());
	
	
	greenway.printCost();
	
	--pagamento fim do mes
	greenway.allUsersPayed();
	IO`println("After payment: ");
	greenway.printCost();
	
	assertEqual(999999-60.1,u.getBalance());-- saldo ap�s pagamento
	
	u.addBalance(50);
	assertEqual(999999-60.1 + 50,u.getBalance());-- saldo ap�s carregamento
	
	
	assertEqual("AutoEstrada",ev.getEventName());
	assertEqual(10,ev.getEventTime());
	assertEqual(d,ev.getEventDevice());
	assertEqual(sp2,ev.getEventExitPoint());
	assertEqual([ev4.getEventEntryPoint().getServiceLocation(),ev3.getEventEntryPoint().getServiceLocation(),ev2.getEventEntryPoint().getServiceLocation(),ev.getEventEntryPoint().getServiceLocation()],d.getDeviceHist());
	assertEqual("ponto1",sp.getServiceName());

);



public static main: () ==> ()
	main() == (
		new Testes().teste1();
	);
functions
-- TODO Define functiones here
traces
-- TODO Define Combinatorial Test Traces here
end Testes