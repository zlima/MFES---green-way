class User
types
-- TODO Define types here

public Name = seq of char;
public UserID = nat1;
public DeviceID = nat1;
public Device = GreenWay_Device;
public Devices = set of Device;
public CardBalance = real;


values
-- TODO Define values here
instance variables
-- TODO Define instance variables here
public name : Name;
public devices: Devices;
public userid : UserID;
public balance : CardBalance;
operations
-- TODO Define operations here
--construtor
public User : UserID * Name * CardBalance ==> User
	User(ID,name_,cardbalance_) == (
	
	userid := ID;
	name := name_;
	balance := cardbalance_;
	devices := {};
	return self;
	)
	pre len name_ > 0 and cardbalance_ >= 0
	post userid  = ID and name = name_ and balance = cardbalance_;
	
	
	--add money to card
	public addBalance: CardBalance ==> ()
	addBalance(balan) ==(
		balance := balance+balan;
		)
		pre balan > 0
		post balance > 0 and balance > balance~;
	
	
	public addDevice: Device ==> ()
	addDevice(device_) ==(
	
	devices := {device_} union devices;
	
	)pre device_ not in set devices
	post card devices > card devices~;
	
	
	public getDevices : () ==> Devices
		getDevices() == return devices;
	
		public getName : () ==> Name
		getName() == return name;
		
		public getBalance : () ==> CardBalance
		getBalance() == return balance;
	
	public Payment: Device ==> ()
	Payment(device_) ==(
		balance := balance-device_.getDebt();
		device_.clearDebts();
		)
		post balance > 0 and balance <= balance~;
		
		public allPayed:() ==> ()
			allPayed() == (
			
			for all d in set devices
			do
			(
				Payment(d);
			)
			
			);

functions
-- TODO Define functiones here
traces
-- TODO Define Combinatorial Test Traces here

end User