class GreenWay
types
-- TODO Define types here
public User_ = User;
public Users = seq of User_;
public ServiceProvider = Service_Provider;
public ServicesProviders = seq of ServiceProvider;
values
-- TODO Define values here
instance variables
-- TODO Define instance variables here
private users : Users;
private servicesProviders : ServicesProviders;
operations
-- TODO Define operations here
public GreenWay: Users * ServicesProviders ==> GreenWay
	GreenWay(users_, services_)== (
		users := users_;
		servicesProviders := services_;
		return self;
	);


-- month payments
				public monthPayment: User ==> ()
				monthPayment(user_) == user_.allPayed();				
				
				public allUsersPayed: () ==> ()
				allUsersPayed() == (
					for u in users
					do(
						monthPayment(u);
					)
				);
				
	--prints
	
			-- print Costs
			public printCost: () ==> ()
			 printCost() ==(
			 		IO`println("Costs from all Devices:");
			 		for u in users	
			 		do 	(
			 		IO`print("User: ");
			 		IO`println(u.getName());
			 		IO`println(" ");
			 		for d in u.getDevices()
			 		do(
			 			IO`print("Device - ");
			 			IO`print(d.getDeviceID());
			 			IO`print(" Plate - ");
			 			IO`print(d.getPlate());
			 			IO`print(" to pay: ");
				 		IO`print(d.getDebt());
				 		IO`println("€");
				 		);
				 		IO`println(" ");
			 		);
			 		IO`println(" ");
			 ) ;
				
	public addUser: User_ ==> ()
		addUser(user_) == (
			users := users ^ [user_];
		)
		pre user_ not in set elems users 
		post users = users~ ^ [user_];

public addServiceProvider : ServiceProvider ==> ()
	addServiceProvider(service_) ==(
	 servicesProviders := servicesProviders ^[service_]
	)pre service_ not in set elems servicesProviders
	post servicesProviders = servicesProviders~ ^ [service_];

public getUsers: () ==> Users
	getUsers() == return users;


functions
-- TODO Define functiones here
traces
-- TODO Define Combinatorial Test Traces here
end GreenWay